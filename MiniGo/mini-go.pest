// Program

File         = { SOI ~ Program ~ EOI }

Program      = { TopLevelDecl* }

TopLevelDecl = { VarDecl ~ ";" | FunctionDecl }


// Expression

ExpressionList = { Expression ~ ( "," ~ Expression )* }

Expression     = { UnaryExpr ~ (BinaryOp ~ UnaryExpr)* }

UnaryExpr      = { UnaryOp* ~ PrimaryExpr }
PrimaryExpr    = { Operand ~ ( Index | Arguments )* }

Operand        = { Literal | OperandName | "(" ~ Expression ~ ")" }
OperandName    = { Identifier }

Index          = { "[" ~ Expression ~ "]" }
Arguments      = { "(" ~ ( ExpressionList ~ ","? )? ~ ")" }


// Operators

assignOp  = { ( AddOp | MulOp )? ~ "=" }

BinaryOp  = { "||" | "&&" | AddOp | MulOp | RelOp }
RelOp     = { "==" | "!=" |"<=" | "<" | ">=" | ">" }
AddOp     = { "+" | "-" | "|" | "^" }
MulOp     = { "*" | "/" | "%" | "<<" | ">>" | "&^" | "&" }

UnaryOp   = { "+" | "-" | "!" | "^" }


// Type

Type           = { TypeLit | TypeName | "(" ~ Type ~ ")" }
TypeName       = { "int" | "bool" | "string" }
TypeLit        = { ArrayType | FunctionType }


// Function declaration (definition)

FunctionDecl  = { "func" ~ FunctionName ~ Signature ~ FunctionBody }
FunctionName  = { Identifier }
FunctionBody  = { Block }

FunctionType  = { "func" ~ Signature }
Signature     = { Parameters ~ Result? }
Result        = { Parameters | Type }
Parameters    = { "(" ~ ( ParameterList ~ ","? )? ~ ")" }
ParameterList = { ParameterDecl ~ ( "," ~ ParameterDecl )* }
ParameterDecl = { IdentifierList? ~ Type }


// Statements

Statement      = { ReturnStmt | BreakStmt | ContinueStmt | ForStmt | VarDecl | IfElseStmt | Block | SimpleStmt }

ReturnStmt     = { "return" ~ ExpressionList? }
BreakStmt      = { "break" }
ContinueStmt   = { "continue" }

ForStmt        = { "for" ~ ( ForClause | Condition )? ~ Block }
ForClause      = { SimpleStmt? ~ ";" ~ Condition? ~ ";" ~ SimpleStmt? }
Condition      = { Expression }

VarDecl        = { "var" ~ ( VarSpec | "(" ~ ( VarSpec ~ ";" )* ~ ")" ) }
VarSpec        = { IdentifierList ~ ( Type ~ ( "=" ~ ExpressionList )? | "=" ~ ExpressionList ) }

IfElseStmt     = { "if" ~ ( SimpleStmt ~ ";" )? ~ Expression ~ Block ~ ("else" ~ ( IfElseStmt | Block ))? }

SimpleStmt     = { Assignment | IncDecStmt | ShortVarDecl | ExpressionStmt }

Assignment     = { ExpressionList ~ assignOp ~ ExpressionList }
IncDecStmt     = { Expression ~ ( "++" | "--" ) }
ShortVarDecl   = { IdentifierList ~ ":=" ~ ExpressionList }
ExpressionStmt = { Expression }

Block          = { "{" ~ ( Statement? ~ ";")* ~ "}" }


// Array

ArrayType = { "[" ~ Expression ~ "]" ~ Type }


// Literal

Literal = {  IntLit | BoolLit | StringLit | ArrayLiteral | FunctionLit }


// Complex literals

FunctionLit       = { "func" ~ Signature ~ FunctionBody }

ArrayLiteral      = { ArrayLiteralType ~ ArrayLiteralValue }
ArrayLiteralType  = { ArrayType }
ArrayLiteralValue = { "{" ~ ( KeyedElementList ~ ","? )? ~ "}" }
KeyedElementList  = { KeyedElement ~ ( "," ~ KeyedElement )* }
KeyedElement      = { ( Key ~ ":" )? ~ Element }
Key               = { Expression }
Element           = { Expression | ArrayLiteralValue }


// Basic literals

IntLit      = @{ BinaryLit | OctalLit | HexLit | DecimalLit }
DecimalLit  = { "0" | '1'..'9' ~ ( "_"? ~ DecimalDigit )* }
BinaryLit   = { "0" ~ ( "b" | "B" ) ~ ( "_"? ~ BinaryDigit )+ }
OctalLit    = { "0" ~ ( "o" | "O" )? ~ ( "_"? ~ OctalDigit )+ }
HexLit      = { "0" ~ ( "x" | "X" ) ~ ( "_"? ~ HexDigit )+ }

BoolLit     = @{ "true" | "false" }

StringLit   = @{ "\"" ~ StringChar* ~ "\"" }
StringChar  = { !(Newline | "\\" | "\"") ~ UnicodeChar | EscapedChar }
EscapedChar = { "\\" ~ ( "a" | "b" | "f" | "n" | "r" | "t" | "v" | "\\" | "\"" ) }


// Identifier

IdentifierList = { Identifier ~ ( "," ~ Identifier )* }

Identifier     = @{ Letter ~ ( Letter | UnicodeDigit )* }

Letter         = { UnicodeLetter | "_" }


// Basic elements

DecimalDigit  = { '0'..'9' }
BinaryDigit   = { "0" | "1" }
OctalDigit    = { '0'..'7' }
HexDigit      = { '0'..'9' | 'A'..'F' | 'a'..'f' }

Newline       = { "\n" }
UnicodeChar   = { ANY }
UnicodeLetter = { LETTER }
UnicodeDigit  = { LETTER_NUMBER }


// Ignored symbols

WHITESPACE = _{ WHITE_SPACE }
COMMENT    = _{ "//" ~ (!"\n" ~ ANY)* ~ "\n" | "/*" ~ (!"*/" ~ ANY)* ~ "*/" }